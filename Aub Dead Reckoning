#=== main_mission.py (Raspberry Pi Code) ===
import serial
import time
import RPi.GPIO as GPIO
from thermal_camera import mlx  # MLX90640 setup
from vl53l0x_multi import VL53L0X
from field_simulation import CompetitionField
import board
import busio
import digitalio
import adafruit_vl53l0x
import numpy as np
import math

# === SENSOR LAYOUT (Index ‚Üí Physical Position) ===
#  0 ‚Üí Front Left
#  1 ‚Üí Front Middle-Left
#  2 ‚Üí Front Middle-Right
#  3 ‚Üí Front Right
#  4 ‚Üí Back Left
#  5 ‚Üí Back Middle-Left
#  6 ‚Üí Back Middle-Right
#  7 ‚Üí Back Right
#  8 ‚Üí Front Ultra-Left (replaces ultrasonic left)
#  9 ‚Üí Front Ultra-Right (replaces ultrasonic right)

# Config
SWITCH_PIN = 26
SCAN_DIRECTION = "RIGHT"  # or "LEFT"
SCAN_ANGLE = 90
SCAN_STEP = 20
BACKUP_INCHES = 2
current_heading = 0

# Sensor I2C addresses
SENSOR_ADDRESSES = [
    0x30, 0x31, 0x32, 0x34,  # Front 4
    0x35, 0x36, 0x37, 0x38,  # Back 4
    0x39, 0x40
]

# GPIO pins using board constants
XSHUT_PINS = [
    board.D17, board.D27, board.D22, board.D23,
    board.D24, board.D25, board.D5, board.D6,
    board.D20, board.D21
]

# Global list to store initialized sensors
tof_sensors = []

def init_tof_sensors():
    global tof_sensors
    i2c = busio.I2C(board.SCL, board.SDA)

    # Power down all sensors
    xshuts = []
    for pin in XSHUT_PINS:
        x = digitalio.DigitalInOut(pin)
        x.direction = digitalio.Direction.OUTPUT
        x.value = False
        xshuts.append(x)
    time.sleep(0.5)

    # Power up sensors one by one and assign unique addresses
    tof_sensors = []
    for i in range(len(XSHUT_PINS)):
        print(f"[INIT] Powering Sensor {i+1}")
        xshuts[i].value = True
        time.sleep(0.1)
        try:
            sensor = adafruit_vl53l0x.VL53L0X(i2c)
            sensor.set_address(SENSOR_ADDRESSES[i])
            time.sleep(0.05)
            sensor = adafruit_vl53l0x.VL53L0X(i2c, address=SENSOR_ADDRESSES[i])
            tof_sensors.append(sensor)
            print(f"[SUCCESS] Sensor {i+1} at 0x{SENSOR_ADDRESSES[i]:X}")
        except Exception as e:
            print(f"[ERROR] Sensor {i+1}: {e}")
            tof_sensors.append(None)

def thermal_acquire_target(scan_step=30, max_rotation=360, threshold=40):
    print("[SEEK] Performing 360¬∞ fire scan (every 60¬∞)...")

    hottest_temp = -999
    best_angle = 0
    total_rotated = 0

    while total_rotated < max_rotation:
        frame = [0] * 768
        mlx.getFrame(frame)
        current_max = max(frame)
        print(f"[SCAN] Rotated {total_rotated}¬∞ ‚Üí Max Temp: {current_max:.2f}¬∞C")

        if current_max > hottest_temp:
            hottest_temp = current_max
            best_angle = total_rotated

        if current_max >= threshold:
            print(f"[LOCK] Fire target found at {total_rotated}¬∞ ‚Üí {current_max:.2f}¬∞C")
            return total_rotated

        send_command(f"ROTATE:{scan_step}")
        wait_for_done()
        total_rotated += scan_step

    print(f"[SEEK] No fire ‚â• {threshold}¬∞C found.")
    print(f"[SEEK] Returning to hottest angle: {best_angle}¬∞ @ {hottest_temp:.2f}¬∞C")
    return best_angle



def get_tof_distances():
    distances = {}
    for i, sensor in enumerate(tof_sensors):
        try:
            distances[i] = sensor.range if sensor else 0
        except Exception as e:
            print(f"[ToF ERROR] Sensor {i}: {e}")
            distances[i] = 0
    return distances

# Init GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(SWITCH_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Init Serial to Arduino
arduino = serial.Serial("/dev/ttyACM0", 115200, timeout=1)
time.sleep(2)
arduino.reset_input_buffer()

# Init Sensors
init_tof_sensors()

# Init Simulation
field = CompetitionField()
robot = field.getMyRobot()
start_pos = robot.getCurrentLocation()

# === Helper Functions ===
def wait_for_switch():
    print("[WAITING] Flip the switch to start...")
    while GPIO.input(SWITCH_PIN):
        time.sleep(0.1)
    print("[START] Switch ON. Beginning mission.")
def send_command(cmd):
    print(f"[COMMAND] ‚Üí Arduino: {cmd}")
    arduino.write((cmd + "\n").encode())

def wait_for_done():
    global current_heading
    while True:
        if arduino.in_waiting:
            msg = arduino.readline().decode().strip()
            print(f"[ARDUINO] {msg}")
            if msg.startswith("ROTATE:"):
                angle = float(msg.split(":")[1])
                current_heading = (current_heading + angle) % 360
            if msg == "DONE":
                break


def is_back_clear(threshold_mm=75):
    """Check if any rear sensors (4‚Äì7) detect an object too close."""
    tof = get_tof_distances()
    back_indices = [4, 5, 6, 7]
    distances = [tof.get(i, 0) for i in back_indices if tof.get(i, 0) > 0]
    print(f"[BACK] Distances: {distances}")
    return all(d > threshold_mm for d in distances)

def perform_thermal_scan():
    print("[SCAN] Starting initial 80¬∞ thermal sweep...")
    max_temp = -999
    best_angle = 0
    current_angle = 0

    for step in [20, 20, 20, 20]:  # Total: 80¬∞
        angle = step if SCAN_DIRECTION == "RIGHT" else -step
        current_angle += angle
        send_command(f"ROTATE:{angle}")
        wait_for_done()
        time.sleep(0.5)

        frame = [0] * 768
        mlx.getFrame(frame)
        current_max = max(frame)
        print(f"[SCAN] Angle {current_angle}¬∞ ‚Üí Max Temp: {current_max:.2f}¬∞C")

        if current_max > max_temp:
            max_temp = current_max
            best_angle = current_angle

    print(f"[LOCKED] Hottest angle: {best_angle}¬∞ @ {max_temp:.2f}¬∞C")
    return best_angle

def is_obstacle():
    tof = get_tof_distances()
    front_indices = [0, 1, 2, 3, 8, 9]  # All 6 front ToF sensors
    front_blocked = any(
        tof[i] < 200 for i in front_indices if tof.get(i, 0) > 0
    )
    return front_blocked

def reroute():
    print("[AVOID] Assessing best turn direction...")

    tof = get_tof_distances()
    left_indices = [0, 1, 8]
    right_indices = [2, 3, 9]

    left_distances = [tof.get(i, 0) for i in left_indices if tof.get(i, 0) > 0]
    right_distances = [tof.get(i, 0) for i in right_indices if tof.get(i, 0) > 0]

    left_min = min(left_distances) if left_distances else float('inf')
    right_min = min(right_distances) if right_distances else float('inf')

    # Decide pivot direction
    if left_min > right_min:
        preferred_angles = [-45, -30, -60]  # Prefer left pivots
        print("[AVOID] Left side is clearer")
    else:
        preferred_angles = [45, 30, 60]     # Prefer right pivots
        print("[AVOID] Right side is clearer")

    for angle in preferred_angles:
        send_command(f"ROTATE:{angle}")
        wait_for_done()
        if not is_obstacle():
            print(f"[AVOID] Cleared path after turning {angle}¬∞")
            return True

    # If turning didn't work, back up and rotate hard
    print("[AVOID] Pivoting failed ‚Äî backing up")
    print("[AVOID] Checking rear before backing up")
    if is_back_clear():
        send_command(f"MOVE:-{BACKUP_INCHES}")
        wait_for_done()
    else:
        print("[BACK] Too close! Skipping backup.")

    send_command("ROTATE:-90")
    wait_for_done()
    return True

def get_hottest_pixel_info(frame):
    grid = np.array(frame).reshape(24, 32)
    max_temp = np.max(grid)
    max_idx = np.unravel_index(np.argmax(grid), grid.shape)
    row, col = max_idx
    return max_temp, row, col

def rotate_toward_hottest_pixel():
    frame = [0] * 768
    mlx.getFrame(frame)
    _, _, col = get_hottest_pixel_info(frame)
    center_col = 16
    offset = col - center_col
    degrees_per_col = 55 / 32
    angle = offset * degrees_per_col
    print(f"[CENTER] Pixel offset {offset} ‚Üí rotate {angle:.2f}¬∞")
    send_command(f"ROTATE:{angle}")
    wait_for_done()

def safe_move_forward(total_inches, step_size=0.5):
    moved = 0
    while moved < total_inches:
        if is_obstacle():
            print("[BLOCKED] Obstacle detected mid-move!")

            # Back up
            print("[AVOID] Backing up... checking rear sensors")
            if is_back_clear():
                send_command("MOVE:-2")
                wait_for_done()
                field.moveForwards(-2)
            else:
                print("[BACK] Obstacle too close! Cancelling backup.")


            # Try reroute
            reroute()
            return moved  # return how far we made it before rerouting

        send_command(f"MOVE:{step_size}")
        wait_for_done()
        moved += step_size
        field.moveForwards(step_size)
    return moved

def navigate_to_fire(initial_angle):
    send_command(f"ROTATE:{initial_angle}")
    wait_for_done()

    total_distance = 0
    fire_found = False
    fire_confirmed = False

    while True:
        # üî• First: scan to acquire fire heading
        if not fire_found:
            seek_angle = thermal_acquire_target()
            send_command(f"ROTATE:{seek_angle}")
            wait_for_done()
        else:
            rotate_toward_hottest_pixel()

        # üö∂ Then move forward and accumulate distance
        moved = safe_move_forward(4.0)
        total_distance += moved

        # üì∏ Scan thermal frame during movement window
        previous_temp = -999
        scan_interval = 3.0  # start with 3s interval
        last_scan_time = time.time()

        scan_start_time = time.time()
        while time.time() - scan_start_time < scan_interval:
            frame = [0] * 768
            mlx.getFrame(frame)
            max_temp, _, _ = get_hottest_pixel_info(frame)
            print(f"[THERMAL] Max Temp: {max_temp:.2f}¬∞C")
        
            # üî• Check if heat is rising
            if max_temp > previous_temp + 1:  # Significant increase
                print("[TRACKING] Temperature rising ‚Äî scanning faster üîç")
                scan_interval = 1.5
            elif max_temp < previous_temp - 1:
                print("[TRACKING] Temperature dropped ‚Äî slowing scan üîÑ")
                scan_interval = 3.0
        
            previous_temp = max_temp
            time.sleep(0.2)  # slight pause between readings

        if max_temp >= 68:
            print("[ARRIVED] Fire reached!")

            # üîô Step back 4 inches
            print("[SAFETY] Backing up from heat source...")
            send_command("MOVE:-2")
            wait_for_done()
            field.moveForwards(-2)  # update sim position

            # üîÑ Turn around 180¬∞
            print("[ROTATE] Turning 180¬∞ to begin return")
            send_command("ROTATE:180")
            wait_for_done()

            fire_confirmed = True
            break

            if max_temp >= 40:
                fire_found = True

            time.sleep(0.2)

        if fire_confirmed:
            break

        if not fire_found:
            print("[SCAN] No fire yet. Continuing pursuit...")

        if is_obstacle():
            reroute()

    return total_distance


def angle_to_target(from_pos, to_pos):
    dx = to_pos.x - from_pos.x
    dy = to_pos.y - from_pos.y
    angle_rad = math.atan2(dy, dx)
    angle_deg = math.degrees(angle_rad)
    return angle_deg % 360

def get_current_position_from_arduino():
    send_command("GET_POS")
    while True:
        if arduino.in_waiting:
            line = arduino.readline().decode().strip()
            print(f"[ARDUINO] {line}")
            if line.startswith("POS:"):
                try:
                    parts = line[4:].split(",")
                    x = float(parts[0])
                    y = float(parts[1])
                    heading = float(parts[2])  # in degrees
                    return x, y, heading
                except:
                    print("[ERROR] Failed to parse position from Arduino.")
                    return None

def return_to_start_from_real_pos(error_threshold=6.0, max_attempts=5):
    global current_heading
    print("[RETURN] Getting back to origin using real encoder-based position")

    for attempt in range(max_attempts):
        # 1. Get (x, y, heading) from Arduino
        pos = get_current_position_from_arduino()
        if not pos:
            print("[ERROR] Could not get position from Arduino.")
            continue

        x, y, heading = pos
        distance = math.sqrt(x**2 + y**2)

        print(f"[RETURN] Current Position ‚Üí x: {x:.2f}, y: {y:.2f}, heading: {heading:.2f}¬∞")
        print(f"[RETURN] Distance to origin: {distance:.2f} in")

        # 2. If close enough to origin, stop
        if distance <= error_threshold:
            print("[RETURN] Robot is close to starting point ‚úÖ")
            return

        # 3. Calculate desired angle from (x, y) back to (0, 0)
        angle_to_origin = math.degrees(math.atan2(-y, -x)) % 360
        delta_angle = (angle_to_origin - heading + 360) % 360
        if delta_angle > 180:
            delta_angle -= 360  # choose shortest turn

        print(f"[RETURN] Rotating {delta_angle:.2f}¬∞ to face start")
        send_command(f"ROTATE:{delta_angle}")
        wait_for_done()

        # 4. Move toward origin, check for obstacles
        print(f"[RETURN] Moving {distance:.2f} inches toward start...")
        moved = 0
        step = 1.0

        while moved < distance:
            if is_obstacle():
                print("[BLOCKED] Obstacle detected! Initiating avoidance...")
                if is_back_clear():
                    send_command("MOVE:-2")
                    wait_for_done()
                reroute()
                break  # Break out of movement loop to recalculate

            step_distance = min(step, distance - moved)
            send_command(f"MOVE:{step_distance}")
            wait_for_done()
            field.moveForwards(step_distance)  # optional: update simulation
            moved += step_distance

    print("[RETURN] Max attempts reached. Ending return attempts.")


# === Main Execution ===
if __name__ == "__main__":
    try:
        while True:
            wait_for_switch()
            target_angle = perform_thermal_scan()
            distance = navigate_to_fire(target_angle)
            return_to_start(distance)
            print("[DONE] Mission complete. Waiting for switch reset...")
            while GPIO.input(SWITCH_PIN) == 0:
                time.sleep(0.1)
    except KeyboardInterrupt:
        GPIO.cleanup()
