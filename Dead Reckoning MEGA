#include <Arduino.h>
#include <math.h>

// --- Geometry Constants ---
const float WHEEL_DIAMETER = 4.0;              // inches
const float WHEEL_CIRC = WHEEL_DIAMETER * PI;  // inches
const float TICKS_PER_REV = 4480.0;            // 64 CPR × 70:1 gearbox
const float TICK_TO_INCH = WHEEL_CIRC / TICKS_PER_REV;
const float CHASSIS_WIDTH = 6.5;               // inches between left/right wheels

// --- Position Tracking State ---
float x_pos = 0.0;
float y_pos = 0.0;
float heading_rad = 0.0;  // radians

long prev_left_ticks = 0;
long prev_right_ticks = 0;

// === Motor Pins ===
#define M1INA 22
#define M1INB 24
#define M1EN  26
#define M1PWM 4

#define M2INA 28
#define M2INB 30
#define M2EN  32
#define M2PWM 5

// === Encoder Pins ===
#define ENC_FL_A 2
#define ENC_FR_A 3

// === Motion Constants ===
const float INCHES_PER_TICK = 0.0025;  // calibrated
const float ROTATE_MS_PER_DEGREE = 10.0; // adjust this if needed

// === Encoder Tracking ===
volatile long encoderFL = 0, encoderFR = 0;
bool moving = false;
long targetTicks = 0;

// === Encoder ISRs ===
void encFL_ISR() { encoderFL++; }
void encFR_ISR() { encoderFR++; }

void setup() {
  Serial.begin(115200);

  // Motor Pins
  pinMode(M1INA, OUTPUT); pinMode(M1INB, OUTPUT);
  pinMode(M1EN, OUTPUT); pinMode(M1PWM, OUTPUT);

  pinMode(M2INA, OUTPUT); pinMode(M2INB, OUTPUT);
  pinMode(M2EN, OUTPUT); pinMode(M2PWM, OUTPUT);

  // Encoder Pins
  pinMode(ENC_FL_A, INPUT_PULLUP);
  pinMode(ENC_FR_A, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(ENC_FL_A), encFL_ISR, FALLING);
  attachInterrupt(digitalPinToInterrupt(ENC_FR_A), encFR_ISR, FALLING);

  stopMotors();
  Serial.println("[ARDUINO] Ready");
}

void loop() {
  checkSerialCommands();
  updateDeadReckoning();

  if (moving) {
    long avgTicks = (encoderFL + encoderFR) / 2;
    if (avgTicks >= targetTicks) {
      stopMotors();
      moving = false;
      Serial.println("DONE");
    }
  }

  // Optional: Debug print
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint >= 250) {
    float heading_deg = heading_rad * 180.0 / PI;
    Serial.print("[POS] X: "); Serial.print(x_pos, 2);
    Serial.print(" Y: "); Serial.print(y_pos, 2);
    Serial.print(" Heading: "); Serial.println(heading_deg, 2);
    lastPrint = millis();
  }
}

void updateDeadReckoning() {
  long left_ticks = encoderFL;
  long right_ticks = encoderFR;

  long delta_L = left_ticks - prev_left_ticks;
  long delta_R = right_ticks - prev_right_ticks;

  prev_left_ticks = left_ticks;
  prev_right_ticks = right_ticks;

  float dL = delta_L * TICK_TO_INCH;
  float dR = delta_R * TICK_TO_INCH;
  float dCenter = (dL + dR) / 2.0;
  float dTheta = (dR - dL) / CHASSIS_WIDTH;

  // Update pose
  x_pos += dCenter * cos(heading_rad + dTheta / 2.0);
  y_pos += dCenter * sin(heading_rad + dTheta / 2.0);
  heading_rad += dTheta;

  // Normalize heading to 0–2PI
  if (heading_rad < 0) heading_rad += 2 * PI;
  if (heading_rad > 2 * PI) heading_rad -= 2 * PI;
}

void checkSerialCommands() {
  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();

    if (cmd == "GET_POS") {
      float heading_deg = heading_rad * 180.0 / PI;
      Serial.print("POS:");
      Serial.print(x_pos, 2); Serial.print(",");
      Serial.print(y_pos, 2); Serial.print(",");
      Serial.println(heading_deg, 2);
    }

    // handle other commands...
  }
}

void processCommand(String cmd) {
  if (cmd.startsWith("MOVE:")) {
    float inches = cmd.substring(5).toFloat();
    moveLinear(inches);
  } else if (cmd.startsWith("ROTATE:")) {
    float degrees = cmd.substring(7).toFloat();
    rotate(degrees);
  } else if (cmd == "STOP") {
    stopMotors();
    Serial.println("DONE");
  }
}

void moveLinear(float inches) {
  encoderFL = 0; encoderFR = 0;
  targetTicks = abs(inches) / INCHES_PER_TICK;
  moving = true;

  if (inches > 0) {
    digitalWrite(M1INA, LOW); digitalWrite(M1INB, HIGH);
    digitalWrite(M2INA, LOW); digitalWrite(M2INB, HIGH);
  } else {
    digitalWrite(M1INA, HIGH); digitalWrite(M1INB, LOW);
    digitalWrite(M2INA, HIGH); digitalWrite(M2INB, LOW);
  }

  digitalWrite(M1EN, HIGH); digitalWrite(M2EN, HIGH);
  analogWrite(M1PWM, 30); analogWrite(M2PWM, 30);
}

void rotate(float degrees) {
  unsigned long duration = abs(degrees) * ROTATE_MS_PER_DEGREE;

  if (degrees > 0) {
    digitalWrite(M1INA, LOW); digitalWrite(M1INB, HIGH);
    digitalWrite(M2INA, HIGH); digitalWrite(M2INB, LOW);
  } else {
    digitalWrite(M1INA, HIGH); digitalWrite(M1INB, LOW);
    digitalWrite(M2INA, LOW); digitalWrite(M2INB, HIGH);
  }

  digitalWrite(M1EN, HIGH); digitalWrite(M2EN, HIGH);
  analogWrite(M1PWM, 70); analogWrite(M2PWM, 70);
  delay(duration);
  stopMotors();
  Serial.println("DONE");
}

void stopMotors() {
  digitalWrite(M1EN, LOW); digitalWrite(M2EN, LOW);
  analogWrite(M1PWM, 0); analogWrite(M2PWM, 0);
  moving = false;
}
