mport serial
import time
from field_simulation import CompetitionField
from thermal_camera import mlx
from tof_module import get_tof_distances  # Wrapper for your VL53L0X
from ultrasonic_module import get_ultrasonic_distances  # Wrapper for GPIO 20/21
import pigpio
import RPi.GPIO as GPIO

SWITCH_PIN = 26  # GPIO 26 (pin 37)
GPIO.setmode(GPIO.BCM)
GPIO.setup(SWITCH_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

def wait_for_switch():
    print("[WAITING] Flip the switch to start...")
    while GPIO.input(SWITCH_PIN) == 1:
        time.sleep(0.1)
    print("[START] Switch is ON. Beginning mission.")

# Serial to Arduino
arduino = serial.Serial("/dev/ttyACM0", 115200, timeout=1)
time.sleep(2)
arduino.reset_input_buffer()

# Simulation field
field = CompetitionField()
start_pos = field.getMyRobot().getCurrentLocation()

def get_heat_source():
    frame = [0] * 768
    mlx.getFrame(frame)
    max_temp = max(frame)
    max_index = frame.index(max_temp)
    row = max_index // 32
    col = max_index % 32
    print(f"[THERMAL] Max Temp: {max_temp:.2f}°C at Row {row}, Col {col}")
    return max_temp, row, col

def send_command(cmd):
    print(f"[COMMAND] → Arduino: {cmd}")
    arduino.write((cmd + "\n").encode())

def wait_for_done():
    while True:
        if arduino.in_waiting:
            msg = arduino.readline().decode('utf-8', errors='ignore').strip()
            if msg == "DONE":
                print("[✓] Arduino completed action")
                break

def is_obstacle_near():
    tof = get_tof_distances()
    us = get_ultrasonic_distances()

    print(f"[ToF] FL: {tof['front_left']} | FR: {tof['front_right']}")
    print(f"[US]  L: {us['left']:.1f} in | R: {us['right']:.1f} in")

    if (
        tof["front_left"] < 150 or
        tof["front_right"] < 150 or
        us["left"] < 6 or
        us["right"] < 6
    ):
        print("[⚠️] Obstacle Detected")
        return True
    return False

def find_new_path():
    print("[NAVIGATION] Avoiding Obstacle...")
    send_command("TURN LEFT")
    wait_for_done()
    us_left = get_ultrasonic_distances()["left"]
    time.sleep(0.2)

    send_command("TURN RIGHT")
    wait_for_done()
    us_right = get_ultrasonic_distances()["right"]
    time.sleep(0.2)

    if us_left > us_right:
        return "TURN LEFT"
    else:
        return "TURN RIGHT"

def navigate_to_fire_and_back():
    max_temp, row, col = get_heat_source()
    if max_temp < 30:
        print("No fire detected.")
        return

    fire_index = 0 if col < 8 else 1 if col < 16 else 2 if col < 24 else 3
    target_areas = field.getPotentialTargetAreas()
    target_area = target_areas[fire_index]
    fire_center = target_area.getCenterPoint()

    angle = field.getAngleTo(fire_center)
    send_command(f"ROTATE:{angle}")
    wait_for_done()

    while not target_area.checkIfInside(field.getMyRobot().getCurrentLocation()):
        if is_obstacle_near():
            send_command("STOP")
            wait_for_done()
            new_path = find_new_path()
            send_command(new_path)
            wait_for_done()
        else:
            send_command("MOVE:6")
            wait_for_done()
            field.moveForwards(6)

    print("[RETURN] Going back to start...")
    angle_back = field.getAngleTo(start_pos)
    dist_back = field.getDistanceTo(start_pos)
    send_command(f"ROTATE:{angle_back}")
    wait_for_done()
    send_command(f"MOVE:{dist_back}")
    wait_for_done()
    print("🔥 Mission Complete!")

if __name__ == "__main__":
    try:
        while True:
            wait_for_switch()
            navigate_to_fire_and_back()
            print("[DONE] Waiting for switch to go LOW before next run...\n")
            while GPIO.input(SWITCH_PIN) == 0:
                time.sleep(0.1)
    except KeyboardInterrupt:
        GPIO.cleanup()
        print("\n[EXIT] Program terminated.")
